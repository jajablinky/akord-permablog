import { Contract, ContractInput, Tags } from "../types/contract";
import { Membership, MembershipKeys } from "../types/membership";
import { Paginated } from "../types/Paginated";
import { Vault } from "../types/vault";
export declare class ApiClient {
    private _jwt;
    private _storageurl;
    private _apiurl;
    private _dir;
    private _filesDir;
    private _publicDataDir;
    private _contractUri;
    private _transactionUri;
    private _stateDir;
    private _resourceId;
    private _isPublic;
    private _data;
    private _queryParams;
    private _dataRefs;
    private _responseType;
    private _progressHook;
    private _processed;
    private _total;
    private _cancelHook;
    private _tags;
    private _input;
    private _vaultId;
    private _metadata;
    private _shouldBundleTransaction;
    private _numberOfChunks;
    constructor();
    env(config: {
        apiurl: string;
        storageurl: string;
    }): ApiClient;
    auth(jwt: string): ApiClient;
    resourceId(resourceId: string): ApiClient;
    public(isPublic: boolean): ApiClient;
    bundle(shouldBundleTransaction: boolean): ApiClient;
    asArrayBuffer(): ApiClient;
    vaultId(vaultId: string): ApiClient;
    data(data: any): ApiClient;
    queryParams(queryParams: any): ApiClient;
    tags(tags: Tags): ApiClient;
    metadata(metadata: any): ApiClient;
    setResponseType(responseType: string): ApiClient;
    progressHook(hook: (progress: any, data?: any) => void, processed?: number, total?: number): ApiClient;
    cancelHook(hook: AbortController): ApiClient;
    input(input: ContractInput): ApiClient;
    numberOfChunks(numberOfChunks: number): ApiClient;
    /**
     *
     * @requires:
     * - auth()
     * @uses:
     * - data()
     */
    contract(): Promise<any>;
    getContract(): Promise<Contract>;
    getNode(): Promise<any>;
    getNodes(): Promise<any>;
    updateProfile(): Promise<any>;
    deleteVault(): Promise<void>;
    getUser(): Promise<any>;
    getProfile(): Promise<any>;
    getMembers(): Promise<Array<Membership>>;
    getNotifications(): Promise<Paginated<any>>;
    getMemberships(): Promise<Array<Membership>>;
    getVaults(): Promise<Array<Vault>>;
    getMembershipKeys(): Promise<MembershipKeys>;
    getObjects<T>(): Promise<Array<T>>;
    getObject<T>(): Promise<T>;
    invite(): Promise<{
        id: string;
    }>;
    inviteResend(): Promise<{
        id: string;
    }>;
    post(url: string): Promise<any>;
    get(url: string): Promise<any>;
    fetch(method: string, url: string): Promise<any>;
    addQueryParams: (url: string, params: any) => string;
    /**
     *
     * @requires:
     * - auth()
     * - contractId()
     * - input()
     * - metadata()
     * @uses:
     * - tags()
     */
    transaction(): Promise<any>;
    /**
     * Schedules transaction posting
     * @requires:
     * - auth()
     * - resourceId()
     * - metadata()
     * @uses:
     * - tags()
     */
    asyncTransaction(): Promise<void>;
    /**
     *
     * @requires:
     * - auth()
     * - data()
     * @uses:
     * - tags()
     * - dataRefs()
     * - resourceId()
     */
    uploadState(): Promise<{
        resourceUrl: string;
        id: string;
        resourceTx: string;
    }>;
    /**
     *
     * @requires:
     * - auth()
     * - data()
     * @uses:
     * - tags()
     * - dataRefs()
     * - resourceId()
     */
    uploadFile(): Promise<{
        resourceUrl: string;
        id: any;
        resourceTx: any;
    }>;
    /**
     *
     * @requires:
     * - auth()
     * - resourceId()
     */
    downloadFile(): Promise<{
        resourceUrl: string;
        response: import("axios").AxiosResponse<any, any>;
    }>;
    /**
  *
  * @requires:
  * - auth()
  * - resourceId()
  */
    downloadState(): Promise<{
        resourceUrl: string;
        response: import("axios").AxiosResponse<any, any>;
    }>;
    /**
    * Creates data item from uploaded resource. Schedules bundled transaction
    * @requires:
    * - auth()
    * - resourceId()
    * - metadata()
    * @uses:
    * - tags()
    */
    private fileTransaction;
    /**
    * Creates data item from uploaded resource. Schedules bundled transaction
    * @requires:
    * - auth()
    * - metadata()
    * - data()
    * @uses:
    * - tags()
    * - resourceId()
    */
    private stateTransaction;
    private upload;
    private download;
}
