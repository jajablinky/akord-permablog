"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
require("cross-fetch/polyfill");
const AmazonCognitoIdentity = __importStar(require("amazon-cognito-identity-js"));
const config_1 = require("./config");
const logger_1 = require("../logger");
class ApiAuthenticator {
    constructor(config) {
        this.config = (0, config_1.apiConfig)(config);
    }
    getCognitoUser(username) {
        const userPool = this.getCognitoUserPool();
        const userData = {
            Username: username,
            Pool: userPool
        };
        const cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);
        return cognitoUser;
    }
    getCognitoUserPool() {
        const poolData = {
            UserPoolId: this.config.aws_user_pools_id,
            ClientId: this.config.aws_user_pools_web_client_id
        };
        const userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);
        return userPool;
    }
    getJWTToken(username, password) {
        return __awaiter(this, void 0, void 0, function* () {
            const { session } = yield this.authenticateUser(username, password);
            return session.getIdToken().getJwtToken();
        });
    }
    authenticateUser(username, password) {
        return __awaiter(this, void 0, void 0, function* () {
            const cognitoUser = this.getCognitoUser(username);
            const authenticationData = {
                Username: username,
                Password: password,
            };
            const authenticationDetails = new AmazonCognitoIdentity.AuthenticationDetails(authenticationData);
            return new Promise((resolve, reject) => {
                cognitoUser.authenticateUser(authenticationDetails, {
                    onSuccess: function (result) {
                        resolve({ user: cognitoUser, session: result });
                    },
                    onFailure: function (err) {
                        logger_1.Logger.log(err.message);
                        logger_1.Logger.log(JSON.stringify(err));
                        return reject(err.message);
                    }
                });
            });
        });
    }
    getUserAttributes(email, password) {
        return __awaiter(this, void 0, void 0, function* () {
            const { user } = yield this.authenticateUser(email, password);
            return new Promise((resolve, reject) => {
                user.getUserAttributes(function (err, result) {
                    return __awaiter(this, void 0, void 0, function* () {
                        if (err) {
                            logger_1.Logger.log(err.message);
                            logger_1.Logger.log(JSON.stringify(err));
                            reject(err.message);
                        }
                        const attributes = result.reduce(function (attributesObject, attribute) {
                            attributesObject[attribute.Name] = attribute.Value;
                            return attributesObject;
                        }, {});
                        resolve(attributes);
                    });
                });
            });
        });
    }
    signUp(email, password, customAttributes, clientMetadata) {
        return __awaiter(this, void 0, void 0, function* () {
            let attributes = [];
            for (const [key, value] of Object.entries(customAttributes)) {
                attributes.push(new AmazonCognitoIdentity.CognitoUserAttribute({
                    Name: key,
                    Value: value
                }));
            }
            const userPool = this.getCognitoUserPool();
            return new Promise((resolve, reject) => userPool.signUp(email, password, attributes, null, (err, result) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(result);
                }
            }, clientMetadata));
        });
    }
    resendCode(email) {
        return __awaiter(this, void 0, void 0, function* () {
            const user = this.getCognitoUser(email);
            return new Promise((resolve, reject) => user.resendConfirmationCode((err, result) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(result);
                }
            }));
        });
    }
    verifyAccount(email, code) {
        return __awaiter(this, void 0, void 0, function* () {
            const user = this.getCognitoUser(email);
            return new Promise((resolve, reject) => user.confirmRegistration(code, false, (err, result) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(result);
                }
            }));
        });
    }
}
exports.default = ApiAuthenticator;
