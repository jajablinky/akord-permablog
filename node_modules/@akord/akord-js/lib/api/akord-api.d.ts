import { ClientConfig } from "../config";
import { Api } from "./api";
import { ApiConfig } from "./config";
import { Membership, MembershipKeys, RoleType } from "../types/membership";
import { ContractInput, ContractState, Tags } from "../types/contract";
import { ObjectType } from "../types/object";
import { Vault } from "../types/vault";
import { Paginated } from "../types/Paginated";
export default class AkordApi extends Api {
    config: ApiConfig;
    jwtToken: string;
    constructor(config: ClientConfig, jwtToken: string);
    uploadData(items: {
        data: any;
        tags: Tags;
        metadata?: any;
    }[], shouldBundleTransaction?: boolean): Promise<Array<{
        id: string;
        resourceTx: string;
    }>>;
    postContractTransaction(contractId: string, input: ContractInput, tags: Tags, metadata?: any): Promise<string>;
    getMembers(vaultId: string): Promise<Array<Membership>>;
    initContractId(tags: Tags, state?: any): Promise<string>;
    getUserFromEmail(email: string): Promise<any>;
    uploadFile(file: any, tags: Tags, isPublic?: boolean, shouldBundleTransaction?: boolean, progressHook?: (progress: number, data?: any) => void, cancelHook?: AbortController): Promise<{
        resourceUrl: string;
        resourceTx: string;
    }>;
    downloadFile(id: string, isPublic?: boolean, progressHook?: (progress: number, data?: any) => void, cancelHook?: AbortController, numberOfChunks?: number, loadedSize?: number, resourceSize?: number): Promise<any>;
    getProfile(): Promise<any>;
    updateProfile(name: string, avatarUri: string): Promise<void>;
    deleteVault(vaultId: string): Promise<void>;
    inviteNewUser(vaultId: string, email: string, role: RoleType): Promise<{
        id: string;
    }>;
    inviteResend(vaultId: string, membershipId: string): Promise<{
        id: string;
    }>;
    getObject<T>(id: string, type: ObjectType): Promise<T>;
    getMembershipKeys(vaultId: string): Promise<MembershipKeys>;
    getNodeState(stateId: string): Promise<any>;
    getNode(id: string): Promise<any>;
    getNotifications(): Promise<Paginated<any>>;
    getContractState(objectId: string): Promise<ContractState>;
    getMemberships(): Promise<Array<Membership>>;
    getVaults(): Promise<Array<Vault>>;
    getObjectsByVaultId<T>(vaultId: string, type: ObjectType, shouldListAll?: boolean): Promise<Array<T>>;
    getTransactions(vaultId: string): Promise<Array<any>>;
}
export { AkordApi };
