"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AkordApi = void 0;
const api_1 = require("./api");
const config_1 = require("./config");
const api_client_1 = require("./api-client");
const logger_1 = require("../logger");
class AkordApi extends api_1.Api {
    constructor(config, jwtToken) {
        super();
        this.config = (0, config_1.apiConfig)(config.env);
        this.jwtToken = jwtToken;
    }
    uploadData(items, shouldBundleTransaction) {
        return __awaiter(this, void 0, void 0, function* () {
            const resources = [];
            yield Promise.all(items.map((item, index) => __awaiter(this, void 0, void 0, function* () {
                const resource = yield new api_client_1.ApiClient()
                    .env(this.config)
                    .auth(this.jwtToken)
                    .data(item.data)
                    .tags(item.tags)
                    .bundle(shouldBundleTransaction)
                    .metadata(item.metadata)
                    .uploadState();
                logger_1.Logger.log("Uploaded state with id: " + resource.id);
                resources[index] = resource;
            })));
            return resources;
        });
    }
    ;
    postContractTransaction(contractId, input, tags, metadata) {
        return __awaiter(this, void 0, void 0, function* () {
            const txId = yield new api_client_1.ApiClient()
                .env(this.config)
                .auth(this.jwtToken)
                .vaultId(contractId)
                .input(input)
                .metadata(metadata ? metadata : {})
                .tags(tags)
                .transaction();
            logger_1.Logger.log("Uploaded contract interaction with id: " + txId);
            return txId;
        });
    }
    ;
    getMembers(vaultId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield new api_client_1.ApiClient()
                .env(this.config)
                .auth(this.jwtToken)
                .resourceId(vaultId)
                .getMembers();
        });
    }
    ;
    initContractId(tags, state) {
        return __awaiter(this, void 0, void 0, function* () {
            const contractId = yield new api_client_1.ApiClient()
                .env(this.config)
                .auth(this.jwtToken)
                .data({ tags, state })
                .contract();
            logger_1.Logger.log("Created contract with id: " + contractId);
            return contractId;
        });
    }
    ;
    getUserFromEmail(email) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield new api_client_1.ApiClient()
                .env(this.config)
                .auth(this.jwtToken)
                .resourceId(email)
                .getUser();
        });
    }
    ;
    uploadFile(file, tags, isPublic, shouldBundleTransaction, progressHook, cancelHook) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = yield new api_client_1.ApiClient()
                .env(this.config)
                .auth(this.jwtToken)
                .data(file)
                .tags(tags)
                .public(isPublic)
                .bundle(shouldBundleTransaction)
                .progressHook(progressHook)
                .cancelHook(cancelHook)
                .uploadFile();
            logger_1.Logger.log("Uploaded file with id: " + resource.id);
            return resource;
        });
    }
    ;
    downloadFile(id, isPublic, progressHook, cancelHook, numberOfChunks, loadedSize, resourceSize) {
        return __awaiter(this, void 0, void 0, function* () {
            const { response } = yield new api_client_1.ApiClient()
                .env(this.config)
                .auth(this.jwtToken)
                .resourceId(id)
                .public(isPublic)
                .numberOfChunks(numberOfChunks)
                .progressHook(progressHook, loadedSize, resourceSize)
                .cancelHook(cancelHook)
                .asArrayBuffer()
                .downloadFile();
            let fileData;
            if (response.headers['x-amz-meta-encryptedkey']) {
                fileData = response.data;
            }
            else {
                fileData = Buffer.from(response.data).toJSON();
            }
            return { fileData: fileData, headers: response.headers };
        });
    }
    ;
    getProfile() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield new api_client_1.ApiClient()
                .env(this.config)
                .auth(this.jwtToken)
                .getProfile();
        });
    }
    ;
    updateProfile(name, avatarUri) {
        return __awaiter(this, void 0, void 0, function* () {
            yield new api_client_1.ApiClient()
                .env(this.config)
                .auth(this.jwtToken)
                .data({
                name: name,
                avatarUri: avatarUri
            })
                .updateProfile();
        });
    }
    ;
    deleteVault(vaultId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield new api_client_1.ApiClient()
                .env(this.config)
                .auth(this.jwtToken)
                .vaultId(vaultId)
                .deleteVault();
        });
    }
    inviteNewUser(vaultId, email, role) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield new api_client_1.ApiClient()
                .env(this.config)
                .auth(this.jwtToken)
                .vaultId(vaultId)
                .data({
                email: email,
                role: role
            })
                .invite();
        });
    }
    inviteResend(vaultId, membershipId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield new api_client_1.ApiClient()
                .env(this.config)
                .auth(this.jwtToken)
                .vaultId(vaultId)
                .resourceId(membershipId)
                .inviteResend();
        });
    }
    getObject(id, type) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield new api_client_1.ApiClient()
                .env(this.config)
                .auth(this.jwtToken)
                .resourceId(id)
                .queryParams({ type })
                .getObject();
        });
    }
    ;
    getMembershipKeys(vaultId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield new api_client_1.ApiClient()
                .env(this.config)
                .auth(this.jwtToken)
                .vaultId(vaultId)
                .getMembershipKeys();
        });
    }
    ;
    getNodeState(stateId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { response } = yield new api_client_1.ApiClient()
                .env(this.config)
                .auth(this.jwtToken)
                .resourceId(stateId)
                .downloadState();
            return response.data;
        });
    }
    ;
    getNode(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield new api_client_1.ApiClient()
                .env(this.config)
                .auth(this.jwtToken)
                .resourceId(id)
                .getNode();
            return response.data;
        });
    }
    ;
    getNotifications() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield new api_client_1.ApiClient()
                .env(this.config)
                .auth(this.jwtToken)
                .getNotifications();
        });
    }
    ;
    getContractState(objectId) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = yield new api_client_1.ApiClient()
                .env(this.config)
                .auth(this.jwtToken)
                .vaultId(objectId)
                .getContract();
            return contract.state;
        });
    }
    ;
    getMemberships() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield new api_client_1.ApiClient()
                .env(this.config)
                .auth(this.jwtToken)
                .getMemberships();
        });
    }
    ;
    getVaults() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield new api_client_1.ApiClient()
                .env(this.config)
                .auth(this.jwtToken)
                .getVaults();
        });
    }
    ;
    getObjectsByVaultId(vaultId, type, shouldListAll = false) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield new api_client_1.ApiClient()
                .env(this.config)
                .auth(this.jwtToken)
                .vaultId(vaultId)
                .queryParams({
                type,
                shouldListAll
            })
                .getObjects();
        });
    }
    ;
    getTransactions(vaultId) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("Method not implemented");
        });
    }
}
exports.default = AkordApi;
exports.AkordApi = AkordApi;
