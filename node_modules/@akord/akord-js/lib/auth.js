"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Auth = void 0;
const akord_1 = require("./akord");
const crypto_1 = require("@akord/crypto");
const api_authenticator_1 = __importDefault(require("./api/api-authenticator"));
class Auth {
    constructor() {
        /**
        * @param  {string} email
        * @param  {string} password
        * @returns Promise with Akord Client instance, JWT token & Akord Wallet
        */
        this.signIn = function (email, password) {
            return __awaiter(this, void 0, void 0, function* () {
                const jwtToken = yield this.apiAuthenticator.getJWTToken(email, password);
                const userAttributes = yield this.apiAuthenticator.getUserAttributes(email, password);
                const wallet = yield crypto_1.AkordWallet.importFromEncBackupPhrase(password, userAttributes["custom:encBackupPhrase"]);
                return { wallet, jwtToken, akord: new akord_1.Akord(wallet, jwtToken) };
            });
        };
        /**
        * @param  {string} email
        * @param  {string} password
        * @param  {any} clientMetadata JSON client metadata, ex: { clientType: "CLI" }
        * @returns Promise with Akord Wallet
        */
        this.signUp = function (email, password, clientMetadata = {}) {
            return __awaiter(this, void 0, void 0, function* () {
                const wallet = yield crypto_1.AkordWallet.create(password);
                yield this.apiAuthenticator.signUp(email, password, {
                    email,
                    "custom:encBackupPhrase": wallet.encBackupPhrase,
                    "custom:publicKey": yield wallet.publicKey(),
                    "custom:publicSigningKey": yield wallet.signingPublicKey(),
                    "custom:address": yield wallet.getAddress(),
                    "custom:mode": "dark",
                    "custom:notifications": "true",
                }, clientMetadata);
                return wallet;
            });
        };
        /**
        * @param  {string} email
        * @param  {string} code
        * @returns
        */
        this.verifyAccount = function (email, code) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.apiAuthenticator.verifyAccount(email, code);
            });
        };
        this.apiAuthenticator = new api_authenticator_1.default();
    }
}
exports.Auth = Auth;
;
