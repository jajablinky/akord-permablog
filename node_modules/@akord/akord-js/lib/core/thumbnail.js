"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createThumbnail = exports.makePdfThumbnail = exports.THUMBNAIL_HEIGHT = exports.THUMBNAIL_WIDTH = void 0;
const blueimp_load_image_1 = __importDefault(require("blueimp-load-image"));
const logger_1 = require("../logger");
const pdfjsLib = require("pdfjs-dist/legacy/build/pdf.js");
exports.THUMBNAIL_WIDTH = 438;
exports.THUMBNAIL_HEIGHT = 136;
const makeImageThumbnail = (fileUrl) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
        const image = document.createElement('img');
        image.setAttribute('src', fileUrl);
        image.addEventListener('load', () => {
            const canvas = blueimp_load_image_1.default.scale(image, {
                canvas: true,
                cover: true,
                maxWidth: exports.THUMBNAIL_WIDTH
            });
            canvas.toBlob(blob => {
                resolve(blob);
            }, 'image/jpeg', 1);
        });
        image.addEventListener('error', error => {
            logger_1.Logger.log('Make image thumbnail error');
            logger_1.Logger.log(error);
            reject(error);
        });
    });
});
const makeVideoThumbnail = (fileUrl) => __awaiter(void 0, void 0, void 0, function* () {
    const canvasUrl = yield new Promise((resolve, reject) => {
        const video = document.createElement('video');
        video.setAttribute('src', fileUrl);
        video.load();
        video.addEventListener('error', error => {
            logger_1.Logger.log('Make video thumbnail error');
            logger_1.Logger.log(error);
            reject('Make video thumbnail error: ' + error);
        });
        video.addEventListener('loadedmetadata', () => {
            // delay seeking or else 'seeked' event won't fire on Safari
            setTimeout(() => {
                video.currentTime = 0.0;
            }, 200);
            video.addEventListener('seeked', () => {
                const canvas = document.createElement('canvas');
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                canvas
                    .getContext('2d')
                    .drawImage(video, 0, 0, canvas.width, canvas.height);
                resolve(canvas.toDataURL());
            });
        });
    });
    return makeImageThumbnail(canvasUrl);
});
const makePdfThumbnail = (fileUrl) => __awaiter(void 0, void 0, void 0, function* () {
    const defaultWorker = () => {
        if (!pdfjsLib.GlobalWorkerOptions.workerPort) {
            pdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;
            pdfjsLib.GlobalWorkerOptions.workerPort = new pdfjsLib.PDFWorker('default-worker');
        }
        return pdfjsLib.GlobalWorkerOptions.workerPort;
    };
    const pdf = yield pdfjsLib.getDocument({ url: fileUrl, worker: defaultWorker() }).promise;
    const firstPage = yield pdf.getPage(1);
    const canvasUrl = yield new Promise(resolve => {
        const viewport = firstPage.getViewport({ scale: 1 });
        const canvas = document.createElement('canvas');
        canvas.width = viewport.width;
        canvas.height = viewport.height;
        firstPage
            .render({
            canvasContext: canvas.getContext('2d'),
            viewport: viewport
        })
            .promise.then(function () {
            resolve(canvas.toDataURL());
        });
    });
    return makeImageThumbnail(canvasUrl);
});
exports.makePdfThumbnail = makePdfThumbnail;
const createThumbnail = (file) => __awaiter(void 0, void 0, void 0, function* () {
    let thumbnail = null;
    // TODO: make it node & browser compatible
    if (typeof window !== 'undefined') {
        const fileUrl = URL.createObjectURL(file);
        switch (file.type) {
            case 'application/pdf':
                try {
                    thumbnail = yield (0, exports.makePdfThumbnail)(fileUrl);
                }
                catch (error) {
                    logger_1.Logger.log('PDF thumbnail error: ' + error);
                }
                break;
            case 'image/jpeg':
            case 'image/jpg':
            case 'image/png':
            case 'image/gif':
                try {
                    thumbnail = yield makeImageThumbnail(fileUrl);
                }
                catch (error) {
                    logger_1.Logger.log('Image thumbnail error: ' + error);
                }
                break;
            case 'video/mp4':
            case 'video/quicktime':
                try {
                    thumbnail = yield makeVideoThumbnail(fileUrl);
                }
                catch (error) {
                    logger_1.Logger.log('Video thumbnail error: ' + error);
                }
                break;
            default:
                logger_1.Logger.log('Thumbnail not supported for this file type: ' + file.type);
                return null;
                break;
        }
        URL.revokeObjectURL(fileUrl);
        if (thumbnail) {
            // converting recieved Blob to File and adding `data` field with ArrayBuffer
            let thumbnailFile = new File([thumbnail], `thumb_${file.name}`, { type: thumbnail.type });
            thumbnailFile.data = yield thumbnail.arrayBuffer();
            return thumbnailFile;
        }
    }
    return null;
});
exports.createThumbnail = createThumbnail;
