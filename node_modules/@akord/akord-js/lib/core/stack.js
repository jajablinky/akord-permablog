"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackService = void 0;
const node_1 = require("./node");
const constants_1 = require("../constants");
const thumbnail_1 = require("./thumbnail");
const file_1 = require("./file");
const node_2 = require("../types/node");
class StackService extends node_1.NodeService {
    constructor() {
        super(...arguments);
        this.fileService = new file_1.FileService(this.wallet, this.api);
        this.objectType = constants_1.objectType.STACK;
        this.NodeType = node_2.Stack;
    }
    /**
     * @param  {string} vaultId
     * @param  {FileLike} file file object
     * @param  {string} name stack name
     * @param  {string} [parentId] parent folder id
     * @param  {(progress:number)=>void} [progressHook]
     * @param  {AbortController} [cancelHook]
     * @returns Promise with new stack id & corresponding transaction id
     */
    create(vaultId, file, name, parentId, progressHook, cancelHook) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setVaultContext(vaultId);
            this.setActionRef(constants_1.actionRefs.STACK_CREATE);
            this.setFunction(constants_1.functions.NODE_CREATE);
            const body = {
                name: yield this.processWriteString(name ? name : file.name),
                versions: [yield this.uploadNewFileVersion(file, progressHook, cancelHook)]
            };
            const { nodeId, transactionId } = yield this.nodeCreate(body, { parentId });
            return { stackId: nodeId, transactionId };
        });
    }
    /**
    * @param  {string} stackId
    * @param  {FileLike} file file object
    * @param  {(progress:number)=>void} [progressHook]
    * @returns Promise with corresponding transaction id
    */
    uploadRevision(stackId, file, progressHook) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setVaultContextFromObjectId(stackId, this.objectType);
            this.setActionRef(constants_1.actionRefs.STACK_UPLOAD_REVISION);
            const body = {
                versions: [yield this.uploadNewFileVersion(file, progressHook)]
            };
            this.setFunction(constants_1.functions.NODE_UPDATE);
            return this.nodeUpdate(body);
        });
    }
    /**
     * Get stack version by index, return the latest version by default
     * @param  {string} stackId
     * @param  {string} [index] stack version index
     * @returns Promise with version name & data buffer
     */
    getVersion(stackId, index) {
        return __awaiter(this, void 0, void 0, function* () {
            const stack = new node_2.Stack(yield this.api.getObject(stackId, constants_1.objectType.STACK, this.vaultId), null);
            let version;
            if (index) {
                if (stack.versions && stack.versions[index]) {
                    version = stack.versions[index];
                }
                else {
                    throw new Error("Given index: " + index + " does not exist for stack: " + stackId);
                }
            }
            else {
                version = stack.versions[stack.versions.length - 1];
            }
            yield this.setVaultContext(stack.vaultId);
            const { fileData, headers } = yield this.api.downloadFile(version.getUri(node_2.StorageType.S3), this.isPublic);
            const data = yield this.processReadRaw(fileData, headers);
            const name = yield this.processReadString(version.name);
            return { name, data };
        });
    }
    uploadNewFileVersion(file, progressHook, cancelHook) {
        return __awaiter(this, void 0, void 0, function* () {
            const { resourceTx, resourceUrl, resourceHash, numberOfChunks, chunkSize, thumbnailTx, thumbnailUrl } = yield this.postFile(file, progressHook, cancelHook);
            const version = new node_2.FileVersion({
                owner: yield this.wallet.getAddress(),
                createdAt: JSON.stringify(Date.now()),
                name: yield this.processWriteString(file.name),
                type: file.type,
                size: file.size,
                resourceUri: [`arweave:${resourceTx}`, `hash:${resourceHash}`, `s3:${resourceUrl}`],
                thumbnailUri: [`arweave:${thumbnailTx}`, `s3:${thumbnailUrl}`],
                numberOfChunks,
                chunkSize,
            });
            return version;
        });
    }
    postFile(file, progressHook, cancelHook) {
        return __awaiter(this, void 0, void 0, function* () {
            const filePromise = this.fileService.create(file, true, progressHook, cancelHook);
            const thumbnail = yield (0, thumbnail_1.createThumbnail)(file);
            if (thumbnail) {
                const thumbnailPromise = this.fileService.create(thumbnail, false, progressHook);
                const results = yield Promise.all([filePromise, thumbnailPromise]);
                return {
                    resourceTx: results[0].resourceTx,
                    resourceUrl: results[0].resourceUrl,
                    resourceHash: results[0].resourceHash,
                    numberOfChunks: results[0].numberOfChunks,
                    thumbnailTx: results[1].resourceTx,
                    thumbnailUrl: results[1].resourceUrl
                };
            }
            else {
                return yield filePromise;
            }
        });
    }
    setVaultContext(vaultId) {
        const _super = Object.create(null, {
            setVaultContext: { get: () => super.setVaultContext }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield _super.setVaultContext.call(this, vaultId);
            this.fileService.setKeys(this.membershipKeys);
            this.fileService.setRawDataEncryptionPublicKey(this.dataEncrypter.publicKey);
            this.fileService.setVaultId(this.vaultId);
            this.fileService.setIsPublic(this.isPublic);
        });
    }
}
exports.StackService = StackService;
;
