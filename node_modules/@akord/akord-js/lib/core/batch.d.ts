import { Service } from "../core";
import { Node, NodeType } from "../types/node";
import { FileLike } from "../types/file";
import { BatchMembershipInviteResponse, BatchStackCreateResponse } from "../types/batch-response";
import { RoleType } from "../types/membership";
declare class BatchService extends Service {
    static BATCH_CHUNK_SIZE: number;
    /**
     * @param  {{id:string,type:NoteType}[]} items
     * @returns Promise with corresponding transaction ids
     */
    revoke<T extends Node>(items: {
        id: string;
        type: NodeType;
    }[]): Promise<{
        transactionId: string;
    }[]>;
    /**
     * @param  {{id:string,type:NoteType}[]} items
     * @returns Promise with corresponding transaction ids
     */
    restore<T extends Node>(items: {
        id: string;
        type: NodeType;
    }[]): Promise<{
        transactionId: string;
    }[]>;
    /**
     * @param  {{id:string,type:NodeType}[]} items
     * @returns Promise with corresponding transaction ids
     */
    delete<T extends Node>(items: {
        id: string;
        type: NodeType;
    }[]): Promise<{
        transactionId: string;
    }[]>;
    /**
     * @param  {{id:string,type:NodeType}[]} items
     * @returns Promise with corresponding transaction ids
     */
    move<T extends Node>(items: {
        id: string;
        type: NodeType;
    }[], parentId?: string): Promise<{
        transactionId: string;
    }[]>;
    /**
     * @param  {{id:string,role:RoleType}[]} items
     * @returns Promise with corresponding transaction ids
     */
    membershipChangeRole(items: {
        id: string;
        role: RoleType;
    }[]): Promise<{
        transactionId: string;
    }[]>;
    /**
     * @param  {string} vaultId
     * @param  {{file:FileLike,name:string}[]} items
     * @param  {string} [parentId]
     * @param  {(progress:number)=>void} [progressHook]
     * @param  {AbortController} [cancelHook]
     * @returns Promise with new stack ids & their corresponding transaction ids
     */
    stackCreate(vaultId: string, items: {
        file: FileLike;
        name: string;
        parentId?: string;
    }[], progressHook?: (progress: number) => void, cancelHook?: AbortController, processingCountHook?: (count: number) => void, onStackCreated?: (item: {
        file: FileLike;
        name: string;
        parentId?: string;
    }) => Promise<void>): Promise<BatchStackCreateResponse>;
    /**
     * @param  {string} vaultId
     * @param  {{email:string,role:RoleType}[]} items
     * @returns Promise with new membership ids & their corresponding transaction ids
     */
    membershipInvite(vaultId: string, items: {
        email: string;
        role: RoleType;
    }[]): Promise<BatchMembershipInviteResponse>;
    setGroupRef(items: any): void;
}
export { BatchService };
