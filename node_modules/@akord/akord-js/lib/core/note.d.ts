import { NodeService } from "./node";
import { Stack } from "../types/node";
import { StackService } from "./stack";
import { objectType } from "../constants";
declare type NoteType = "text/markdown" | "application/json";
declare class NoteService extends NodeService<Stack> {
    stackService: StackService;
    objectType: objectType;
    NodeType: typeof Stack;
    /**
     * @param  {string} vaultId
     * @param  {string} content note content, ex: stringified JSON
     * @param  {string} name note name
     * @param  {string} [parentId] parent folder id
     * @param  {string} [mimeType] MIME type for the note text file, default: text/markdown
     * @returns Promise with new note id & corresponding transaction id
     */
    create(vaultId: string, content: string, name: string, parentId?: string, mimeType?: NoteType): Promise<{
        noteId: string;
        transactionId: string;
    }>;
    /**
    * @param  {string} noteId
    * @param  {string} content note content, ex: stringified JSON
    * @param  {string} name note name
    * @param  {string} [mimeType] MIME type for the note text file, default: text/markdown
    * @returns Promise with corresponding transaction id
    */
    uploadRevision(noteId: string, content: string, name: string, mimeType?: NoteType): Promise<{
        transactionId: string;
    }>;
    /**
     * Get note version by index, return the latest version by default
     * @param  {string} noteId
     * @param  {string} [index] note version index
     * @returns Promise with version name & data string
     */
    getVersion(noteId: string, index?: string): Promise<{
        name: string;
        data: string;
    }>;
    /**
     * @param  {string} vaultId
     * @returns Promise with all notes within given vault
     */
    list(vaultId: string, listOptions?: import("../types/list-options").ListOptions): Promise<Array<Stack>>;
    private isValidNoteType;
}
export { NoteService };
