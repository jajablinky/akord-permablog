import { objectType } from "../constants";
import { Vault } from "../types/vault";
import { Service } from "./service";
declare class VaultService extends Service {
    objectType: objectType;
    /**
     * @param  {string} name new vault name
     * @param  {string} [termsOfAccess] if the vault is intended for professional or legal use, you can add terms of access and they must be digitally signed before accessing the vault
     * @param  {boolean} [isPublic]
     * @returns Promise with new vault id, owner membership id & corresponding transaction id
     */
    create(name: string, termsOfAccess?: string, isPublic?: boolean): Promise<{
        transactionId: string;
        vaultId: string;
        membershipId: string;
    }>;
    /**
     * @param vaultId
     * @param name new vault name
     * @returns Promise with corresponding transaction id
     */
    rename(vaultId: string, name: string): Promise<{
        transactionId: string;
    }>;
    /**
     * @param  {string} vaultId
     * @returns Promise with corresponding transaction id
     */
    archive(vaultId: string): Promise<{
        transactionId: string;
    }>;
    /**
     * @param  {string} vaultId
     * @returns Promise with corresponding transaction id
     */
    restore(vaultId: string): Promise<{
        transactionId: string;
    }>;
    /**
     * @param  {string} vaultId
     * @returns Promise with corresponding transaction id
     */
    delete(vaultId: string): Promise<{
        transactionId: string;
    }>;
    /**
     * @param  {string} vaultId
     * @returns Promise with the decrypted vault
     */
    get(vaultId: string, shouldDecrypt?: boolean): Promise<Vault>;
    /**
     * @returns Promise with currently authenticated user vaults
     */
    list(shouldDecrypt?: boolean): Promise<Array<Vault>>;
    setVaultContext(vaultId: string): Promise<void>;
}
export { VaultService };
