"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfileService = void 0;
const membership_1 = require("./membership");
const ts_cacheable_1 = require("@akord/ts-cacheable");
const cacheable_1 = require("../types/cacheable");
const service_1 = require("./service");
const constants_1 = require("../constants");
class ProfileService extends service_1.Service {
    constructor() {
        super(...arguments);
        this.objectType = constants_1.objectType.PROFILE;
    }
    /**
     * Fetch currently authenticated user's profile details
     * @returns Promise with profile details
     */
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.getProfileDetails();
        });
    }
    /**
     * Update user profile along with all active memberships
     * @param  {string} name new profile name
     * @param  {any} avatar new avatar buffer
     * @returns Promise with corresponding transaction ids
     */
    update(name, avatar) {
        return __awaiter(this, void 0, void 0, function* () {
            let transactions = [];
            const profilePromise = new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                const profile = yield this.api.getProfile();
                this.setObject(profile);
                this.setRawDataEncryptionPublicKey(yield this.wallet.publicKeyRaw());
                this.setIsPublic(false);
                const profileDetails = yield this.processMemberDetails({ name, avatar }, false);
                // merge & upload current profile state to Arweave
                const currentProfileDetails = profile.state.profileDetails;
                const mergedProfileDetails = {
                    name: profileDetails.name || currentProfileDetails.name || currentProfileDetails.fullName,
                    avatarUri: profileDetails.avatarUri || currentProfileDetails.avatarUri,
                };
                yield this.api.uploadData([{ data: { profileDetails: mergedProfileDetails }, tags: [] }], false);
                yield this.api.updateProfile(mergedProfileDetails.name, mergedProfileDetails.avatarUri);
                resolve();
            }));
            const memberships = yield this.api.getMemberships();
            const membershipPromiseArray = memberships.map((membership) => __awaiter(this, void 0, void 0, function* () {
                const membershipService = new membership_1.MembershipService(this.wallet, this.api);
                const { transactionId } = yield membershipService.profileUpdate(membership.id, name, avatar);
                transactions.push(transactionId);
            }));
            yield Promise.all(membershipPromiseArray.concat([profilePromise]));
            return transactions;
        });
    }
}
__decorate([
    (0, ts_cacheable_1.PCacheable)({
        storageStrategy: ts_cacheable_1.InMemoryStorageStrategy,
        cacheBusterObserver: cacheable_1.CacheBusters.profile,
        shouldCacheDecider: () => cacheable_1.CacheBusters.cache
    })
], ProfileService.prototype, "get", null);
__decorate([
    (0, ts_cacheable_1.PCacheBuster)({
        cacheBusterNotifier: cacheable_1.CacheBusters.profile
    })
], ProfileService.prototype, "update", null);
exports.ProfileService = ProfileService;
;
