import { objectType } from "../constants";
import { Service } from "./service";
import { Membership, RoleType } from "../types/membership";
declare class MembershipService extends Service {
    objectType: objectType;
    /**
     * @param  {string} membershipId
     * @returns Promise with the decrypted membership
     */
    get(membershipId: string, vaultId?: string, shouldDecrypt?: boolean): Promise<Membership>;
    /**
     * @param  {string} vaultId
     * @returns Promise with the decrypted memberships
     */
    list(vaultId: string, listOptions?: import("../types/list-options").ListOptions): Promise<Array<Membership>>;
    /**
     * Invite user with an Akord account
     * @param  {string} vaultId
     * @param  {string} email invitee's email
     * @param  {RoleType} role CONTRIBUTOR or VIEWER
     * @returns Promise with new membership id & corresponding transaction id
     */
    invite(vaultId: string, email: string, role: RoleType): Promise<{
        membershipId: string;
        transactionId: string;
    }>;
    /**
     * @param  {string} membershipId
     * @returns Promise with corresponding transaction id
     */
    accept(membershipId: string): Promise<{
        transactionId: string;
    }>;
    /**
     * @param  {string} membershipId
     * @returns Promise with corresponding transaction id
     */
    confirm(membershipId: string): Promise<{
        transactionId: string;
    }>;
    /**
     * @param  {string} membershipId
     * @returns Promise with corresponding transaction id
     */
    reject(membershipId: string): Promise<{
        transactionId: string;
    }>;
    /**
     * @param  {string} membershipId
     * @returns Promise with corresponding transaction id
     */
    leave(membershipId: string): Promise<{
        transactionId: string;
    }>;
    /**
     * @param  {string} membershipId
     * @returns Promise with corresponding transaction id
     */
    revoke(membershipId: string): Promise<{
        transactionId: string;
    }>;
    /**
     * @param  {string} membershipId
     * @param  {RoleType} role CONTRIBUTOR or VIEWER
     * @returns Promise with corresponding transaction id
     */
    changeRole(membershipId: string, role: RoleType): Promise<{
        transactionId: string;
    }>;
    /**
     * Invite user without an Akord account
     * @param  {string} vaultId
     * @param  {string} email invitee's email
     * @param  {string} role CONTRIBUTOR or VIEWER
     * @returns Promise with new membership id & corresponding transaction id
     */
    inviteNewUser(vaultId: string, email: string, role: RoleType): Promise<{
        membershipId: string;
    }>;
    /**
     * @param  {string} membershipId
     * @returns Promise with corresponding transaction id
     */
    inviteResend(membershipId: string): Promise<void>;
    profileUpdate(membershipId: string, name: string, avatar: any): Promise<{
        transactionId: string;
    }>;
}
export { MembershipService };
