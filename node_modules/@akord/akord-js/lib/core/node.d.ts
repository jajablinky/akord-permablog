import { Service } from './service';
import { NodeLike } from '../types/node';
import { Keys } from '@akord/crypto';
declare class NodeService<T = NodeLike> extends Service {
    protected NodeType: new (arg0: any, arg1: Keys[]) => NodeLike;
    /**
     * @param  {string} nodeId
     * @param  {string} name new name
     * @returns Promise with corresponding transaction id
     */
    rename(nodeId: string, name: string): Promise<{
        transactionId: string;
    }>;
    /**
     * @param  {string} nodeId
     * @param  {string} [parentId] new parent folder id
     * @returns Promise with corresponding transaction id
     */
    move(nodeId: string, parentId?: string, vaultId?: string): Promise<{
        transactionId: string;
    }>;
    /**
     * @param  {string} nodeId
     * @returns Promise with corresponding transaction id
     */
    revoke(nodeId: string, vaultId?: string): Promise<{
        transactionId: string;
    }>;
    /**
     * @param  {string} nodeId
     * @returns Promise with corresponding transaction id
     */
    restore(nodeId: string, vaultId?: string): Promise<{
        transactionId: string;
    }>;
    /**
     * @param  {string} nodeId
     * @returns Promise with corresponding transaction id
     */
    delete(nodeId: string, vaultId?: string): Promise<{
        transactionId: string;
    }>;
    /**
     * @param  {string} nodeId
     * @returns Promise with the decrypted node
     */
    get(nodeId: string, vaultId?: string, shouldDecrypt?: boolean): Promise<T>;
    /**
     * @param  {string} vaultId
     * @returns Promise with all nodes within given vault
     */
    list(vaultId: string, listOptions?: import("../types/list-options").ListOptions): Promise<Array<T>>;
    private nodeInstance;
}
export { NodeService };
