import { NodeService } from "./node";
import { objectType } from "../constants";
import { FileService } from "./file";
import { FileLike } from "../types/file";
import { Stack } from "../types/node";
declare class StackService extends NodeService<Stack> {
    fileService: FileService;
    objectType: objectType;
    NodeType: typeof Stack;
    /**
     * @param  {string} vaultId
     * @param  {FileLike} file file object
     * @param  {string} name stack name
     * @param  {string} [parentId] parent folder id
     * @param  {(progress:number)=>void} [progressHook]
     * @param  {AbortController} [cancelHook]
     * @returns Promise with new stack id & corresponding transaction id
     */
    create(vaultId: string, file: FileLike, name: string, parentId?: string, progressHook?: (progress: number, data?: any) => void, cancelHook?: AbortController): Promise<{
        stackId: string;
        transactionId: string;
    }>;
    /**
    * @param  {string} stackId
    * @param  {FileLike} file file object
    * @param  {(progress:number)=>void} [progressHook]
    * @returns Promise with corresponding transaction id
    */
    uploadRevision(stackId: string, file: FileLike, progressHook?: (progress: number, data?: any) => void): Promise<{
        transactionId: string;
    }>;
    /**
     * Get stack version by index, return the latest version by default
     * @param  {string} stackId
     * @param  {string} [index] stack version index
     * @returns Promise with version name & data buffer
     */
    getVersion(stackId: string, index?: string): Promise<{
        name: string;
        data: ArrayBuffer;
    }>;
    private uploadNewFileVersion;
    private postFile;
    protected setVaultContext(vaultId: string): Promise<void>;
}
export { StackService };
