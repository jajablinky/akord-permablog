"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoteService = void 0;
const node_1 = require("./node");
const node_2 = require("../types/node");
const stack_1 = require("./stack");
const list_options_1 = require("../types/list-options");
const constants_1 = require("../constants");
const crypto_1 = require("@akord/crypto");
var NoteTypes;
(function (NoteTypes) {
    NoteTypes["MD"] = "text/markdown";
    NoteTypes["JSON"] = "application/json";
})(NoteTypes || (NoteTypes = {}));
class NoteService extends node_1.NodeService {
    constructor() {
        super(...arguments);
        this.stackService = new stack_1.StackService(this.wallet, this.api);
        this.objectType = constants_1.objectType.STACK;
        this.NodeType = node_2.Stack;
    }
    /**
     * @param  {string} vaultId
     * @param  {string} content note content, ex: stringified JSON
     * @param  {string} name note name
     * @param  {string} [parentId] parent folder id
     * @param  {string} [mimeType] MIME type for the note text file, default: text/markdown
     * @returns Promise with new note id & corresponding transaction id
     */
    create(vaultId, content, name, parentId, mimeType) {
        return __awaiter(this, void 0, void 0, function* () {
            const noteFile = yield createFile([content], name, mimeType ? mimeType : NoteTypes.MD);
            const { stackId, transactionId } = yield this.stackService.create(vaultId, noteFile, name, parentId);
            return { noteId: stackId, transactionId };
        });
    }
    /**
    * @param  {string} noteId
    * @param  {string} content note content, ex: stringified JSON
    * @param  {string} name note name
    * @param  {string} [mimeType] MIME type for the note text file, default: text/markdown
    * @returns Promise with corresponding transaction id
    */
    uploadRevision(noteId, content, name, mimeType) {
        return __awaiter(this, void 0, void 0, function* () {
            const noteFile = yield createFile([content], name, mimeType ? mimeType : NoteTypes.MD);
            return this.stackService.uploadRevision(noteId, noteFile);
        });
    }
    /**
     * Get note version by index, return the latest version by default
     * @param  {string} noteId
     * @param  {string} [index] note version index
     * @returns Promise with version name & data string
     */
    getVersion(noteId, index) {
        return __awaiter(this, void 0, void 0, function* () {
            const version = yield this.stackService.getVersion(noteId, index);
            return { data: (0, crypto_1.arrayToString)(version.data), name: version.name };
        });
    }
    /**
     * @param  {string} vaultId
     * @returns Promise with all notes within given vault
     */
    list(vaultId, listOptions = list_options_1.defaultListOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const stacks = yield this.stackService.list(vaultId, listOptions);
            return stacks.filter((stack) => { var _a; return this.isValidNoteType((_a = stack.versions) === null || _a === void 0 ? void 0 : _a[stack.versions.length - 1].type); });
        });
    }
    isValidNoteType(type) {
        return Object.values(NoteTypes).includes(type);
    }
}
exports.NoteService = NoteService;
;
function createFile(sources, name, mimeType, lastModified) {
    return __awaiter(this, void 0, void 0, function* () {
        if (typeof window === "undefined") {
            const node = yield Promise.resolve().then(() => __importStar(require("../types/file")));
            return new node.NodeJs.File(sources, name, mimeType, lastModified);
        }
        else {
            return new File(sources, name, { type: mimeType, lastModified });
        }
    });
}
