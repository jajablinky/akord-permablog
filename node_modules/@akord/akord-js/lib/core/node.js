"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeService = void 0;
const service_1 = require("./service");
const constants_1 = require("../constants");
const list_options_1 = require("../types/list-options");
class NodeService extends service_1.Service {
    /**
     * @param  {string} nodeId
     * @param  {string} name new name
     * @returns Promise with corresponding transaction id
     */
    rename(nodeId, name) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setVaultContextFromObjectId(nodeId, this.objectType);
            this.setFunction(constants_1.functions.NODE_UPDATE);
            const body = {
                name: yield this.processWriteString(name)
            };
            return this.nodeUpdate(body);
        });
    }
    /**
     * @param  {string} nodeId
     * @param  {string} [parentId] new parent folder id
     * @returns Promise with corresponding transaction id
     */
    move(nodeId, parentId, vaultId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setVaultContextFromObjectId(nodeId, this.objectType, vaultId);
            this.setFunction(constants_1.functions.NODE_MOVE);
            return this.nodeUpdate(null, { parentId });
        });
    }
    /**
     * @param  {string} nodeId
     * @returns Promise with corresponding transaction id
     */
    revoke(nodeId, vaultId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setVaultContextFromObjectId(nodeId, this.objectType, vaultId);
            this.setFunction(constants_1.functions.NODE_REVOKE);
            return this.nodeUpdate();
        });
    }
    /**
     * @param  {string} nodeId
     * @returns Promise with corresponding transaction id
     */
    restore(nodeId, vaultId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setVaultContextFromObjectId(nodeId, this.objectType, vaultId);
            this.setFunction(constants_1.functions.NODE_RESTORE);
            return this.nodeUpdate();
        });
    }
    /**
     * @param  {string} nodeId
     * @returns Promise with corresponding transaction id
     */
    delete(nodeId, vaultId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setVaultContextFromObjectId(nodeId, this.objectType, vaultId);
            this.setFunction(constants_1.functions.NODE_DELETE);
            return this.nodeUpdate();
        });
    }
    /**
     * @param  {string} nodeId
     * @returns Promise with the decrypted node
     */
    get(nodeId, vaultId, shouldDecrypt = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const nodeProto = yield this.api.getObject(nodeId, this.objectType, vaultId);
            const { isEncrypted, keys } = yield this.api.getMembershipKeys(nodeProto.vaultId);
            const node = this.nodeInstance(nodeProto, keys);
            if (isEncrypted && shouldDecrypt) {
                yield node.decrypt();
            }
            return node;
        });
    }
    /**
     * @param  {string} vaultId
     * @returns Promise with all nodes within given vault
     */
    list(vaultId, listOptions = list_options_1.defaultListOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const nodes = yield this.api.getObjectsByVaultId(vaultId, this.objectType, listOptions.shouldListAll);
            const { isEncrypted, keys } = yield this.api.getMembershipKeys(vaultId);
            return yield Promise.all(nodes
                .map((nodeProto) => __awaiter(this, void 0, void 0, function* () {
                const node = this.nodeInstance(nodeProto, keys);
                if (isEncrypted && listOptions.shouldDecrypt) {
                    yield node.decrypt();
                }
                return node;
            })));
        });
    }
    nodeInstance(nodeProto, keys) {
        return new this.NodeType(nodeProto, keys);
    }
}
exports.NodeService = NodeService;
