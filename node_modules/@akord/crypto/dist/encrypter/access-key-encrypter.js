"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessKeyEncrypter = void 0;
const encrypter_1 = require("./encrypter");
const crypto = __importStar(require("../functions"));
/**
 * Access key de-/encryption specific methods
 */
class AccessKeyEncrypter extends encrypter_1.Encrypter {
    constructor(wallet, encAccessKey, publicKey) {
        super(publicKey);
        this.wallet = wallet;
        this.encAccessKey = encAccessKey;
        this.accessKey = null;
    }
    encryptRaw(plaintext) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._decryptAccessKey();
            return crypto.encrypt(plaintext, this.accessKey);
        });
    }
    decryptRaw(encryptedPayload, decode = true) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._decryptAccessKey();
            return crypto.decrypt(encryptedPayload, this.accessKey, decode);
        });
    }
    encryptMemberKeys() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._decryptAccessKey();
            const keyString = yield crypto.exportKeyToBase64(this.accessKey);
            const encryptedKey = yield crypto.encryptStringWithPublicKey(this.publicKey, keyString);
            return encryptedKey;
        });
    }
    _decryptAccessKey() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.accessKey)
                this.accessKey = yield this._decryptKeyWithWallet();
        });
    }
    /**
     * CryptoKey object decryption
     * - decrypts encoded key string wtih the wallet's private key
     * - import CryptoKey object from the encoded string
     * @returns {Promise.<CryptoKey>}
     */
    _decryptKeyWithWallet() {
        return __awaiter(this, void 0, void 0, function* () {
            const decryptedKey = yield crypto.decryptStringWithPrivateKey(this.wallet.privateKeyRaw(), this.encAccessKey);
            const key = yield crypto.importKeyFromBase64(decryptedKey);
            return key;
        });
    }
    /**
    * CryptoKey object encryption
    * - export CryptoKey object to base64 encoded string
    * - encrypts encoded key string with the wallet's public key
    * @param {CryptoKey} key
    * @returns {Promise.<string>}
    */
    _encryptKeyWithWallet(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const keyString = yield crypto.exportKeyToBase64(key);
            const publicKeyRaw = yield this.wallet.publicKeyRaw();
            return crypto.encryptStringWithPublicKey(publicKeyRaw, keyString);
        });
    }
    encryptMemberKey() {
        throw new Error('Method not implemented.');
    }
    setKeys() {
        throw new Error('Method not implemented.');
    }
}
exports.AccessKeyEncrypter = AccessKeyEncrypter;
//# sourceMappingURL=access-key-encrypter.js.map