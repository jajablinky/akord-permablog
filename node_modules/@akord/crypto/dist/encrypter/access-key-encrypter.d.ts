import { Encrypter } from './encrypter';
import { Wallet } from '../wallet';
/**
 * Access key de-/encryption specific methods
 */
declare class AccessKeyEncrypter extends Encrypter {
    encAccessKey: any;
    accessKey: any;
    constructor(wallet: Wallet, encAccessKey: string, publicKey?: Uint8Array);
    encryptRaw(plaintext: Uint8Array): Promise<string | {
        ciphertext: any;
        iv: string;
    }>;
    decryptRaw(encryptedPayload: any, decode?: boolean): Promise<any>;
    encryptMemberKeys(): Promise<string>;
    _decryptAccessKey(): Promise<void>;
    /**
     * CryptoKey object decryption
     * - decrypts encoded key string wtih the wallet's private key
     * - import CryptoKey object from the encoded string
     * @returns {Promise.<CryptoKey>}
     */
    _decryptKeyWithWallet(): Promise<CryptoKey>;
    /**
    * CryptoKey object encryption
    * - export CryptoKey object to base64 encoded string
    * - encrypts encoded key string with the wallet's public key
    * @param {CryptoKey} key
    * @returns {Promise.<string>}
    */
    _encryptKeyWithWallet(key: CryptoKey): Promise<string>;
    encryptMemberKey(): Promise<any>;
    setKeys(): void;
}
export { AccessKeyEncrypter };
