"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Encrypter = void 0;
const encoding_1 = require("../encoding");
class Encrypter {
    constructor(publicKey) {
        this.publicKey = publicKey;
    }
    setPublicKey(publicKey) {
        this.publicKey = (0, encoding_1.base64ToArray)(publicKey);
    }
    setRawPublicKey(publicKey) {
        this.publicKey = publicKey;
    }
    decryptObject(encryptedObject, fieldsToDecrypt) {
        return __awaiter(this, void 0, void 0, function* () {
            let decryptedObject = encryptedObject;
            const promises = fieldsToDecrypt.map((fieldName) => __awaiter(this, void 0, void 0, function* () {
                if (decryptedObject[fieldName] &&
                    decryptedObject[fieldName] !== null &&
                    decryptedObject[fieldName] !== '') {
                    const decryptedValue = yield this.decryptRaw(decryptedObject[fieldName]);
                    decryptedObject[fieldName] = (0, encoding_1.arrayToString)(decryptedValue);
                }
            }));
            return Promise.all(promises).then(() => decryptedObject);
        });
    }
    encryptString(_string) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.encryptRaw((0, encoding_1.stringToArray)(_string));
        });
    }
    decryptString(_encryptedString) {
        return __awaiter(this, void 0, void 0, function* () {
            const decryptedDataArray = yield this.decryptRaw(_encryptedString);
            return (0, encoding_1.arrayToString)(decryptedDataArray);
        });
    }
}
exports.Encrypter = Encrypter;
//# sourceMappingURL=encrypter.js.map