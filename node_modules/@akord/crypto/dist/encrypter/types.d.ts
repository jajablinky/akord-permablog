import { EncryptionKeys } from ".";
import { Wallet } from "../wallet";
import { Encrypter } from "./encrypter";
export declare abstract class Encrypted {
    encryptionType: EncryptionType;
    keys: Keys[];
    encAccessKey: string;
    constructor(encryptionType?: EncryptionType, keys?: Keys[], encAccessKey?: string);
}
export declare enum EncryptionType {
    ACCESS_KEY = "ACCESS_KEY",
    KEYS_STRUCTURE = "KEYS_STRUCTURE"
}
export declare class Keys {
    encPublicKey: string;
    encPrivateKey: string;
    constructor(encPublicKey: string, encPrivateKey: string);
}
export declare class EncrypterFactory {
    encrypter: Encrypter;
    constructor(wallet: Wallet, encryptionKeys?: EncryptionKeys);
    encrypterInstance(): Encrypter;
}
