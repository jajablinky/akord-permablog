import { Wallet } from '../wallet';
declare abstract class Encrypter {
    publicKey: Uint8Array | CryptoKey;
    decryptedKeys: {
        publicKey: any;
        privateKey: any;
    }[];
    wallet: Wallet;
    encAccessKey: any;
    constructor(publicKey: Uint8Array | CryptoKey);
    abstract encryptRaw(plaintext: Uint8Array, encode?: Boolean, encryptedKey?: string): Promise<any>;
    abstract decryptRaw(encryptedPayload: any, decode?: Boolean): Promise<any>;
    abstract encryptMemberKeys(memberKeys?: any[]): Promise<any[] | string>;
    abstract encryptMemberKey(privateKey: any): Promise<any>;
    abstract setKeys(keys: any): void;
    setPublicKey(publicKey: string): void;
    setRawPublicKey(publicKey: Uint8Array): void;
    decryptObject(encryptedObject: any, fieldsToDecrypt: any[]): Promise<any>;
    encryptString(_string: string): Promise<any>;
    decryptString(_encryptedString: string): Promise<string>;
}
export { Encrypter };
