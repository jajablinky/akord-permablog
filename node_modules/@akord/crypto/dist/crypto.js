"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Crypto = exports.CryptoClass = exports.WalletType = void 0;
const encrypter_1 = require("./encrypter");
const types_1 = require("./encrypter/types");
const wallet_1 = require("./wallet");
var WalletType;
(function (WalletType) {
    WalletType["Akord"] = "Akord";
    WalletType["Arweave"] = "Arweave";
})(WalletType = exports.WalletType || (exports.WalletType = {}));
class CryptoClass {
    constructor(config) {
        this._config = config;
    }
    configure(config) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!config)
                return this._config;
            this._config = config;
            yield this.configureWallet();
            this.configureEncrypter();
            return this._config;
        });
    }
    wallet() {
        return this._wallet;
    }
    encrypter() {
        return this._encrypter;
    }
    encrypt(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._encrypter.encryptString(input);
        });
    }
    decryptRaw(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._encrypter.decryptRaw(input, false);
        });
    }
    decrypt(input) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._encrypter.decryptString(input);
        });
    }
    configureEncrypter() {
        if (!this._config.encryptionType) {
            this._config.encryptionType = types_1.EncryptionType.KEYS_STRUCTURE;
        }
        const keys = this._config.keys || [];
        const encryptionKeys = new encrypter_1.EncryptionKeys(this._config.encryptionType, keys);
        this._encrypter = new types_1.EncrypterFactory(this._wallet, encryptionKeys).encrypterInstance();
    }
    configureWallet() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._config.wallet) {
                this._wallet = this._config.wallet;
            }
            if (!this._config.walletType) {
                this._config.walletType = WalletType.Akord;
            }
            if (!this._wallet) {
                if (this._config.walletType === WalletType.Akord) {
                    if (this._config.encBackupPhrase && this._config.password) {
                        this._wallet = yield wallet_1.AkordWallet.importFromEncBackupPhrase(this._config.password, this._config.encBackupPhrase);
                    }
                    else if (this._config.backupPhrase) {
                        this._wallet = yield wallet_1.AkordWallet.importFromBackupPhrase(this._config.backupPhrase);
                    }
                }
                // TODO: handle Arweave wallet
            }
        });
    }
}
exports.CryptoClass = CryptoClass;
exports.Crypto = new CryptoClass(null);
//# sourceMappingURL=crypto.js.map